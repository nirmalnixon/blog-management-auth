{"ast":null,"code":"import axios from 'axios';\n\n// Create an instance of axios\nconst api = axios.create({\n  baseURL: 'http://localhost:3000/' // Replace with your API base URL\n});\n\n// Request interceptor\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token'); // Or get the token from your preferred storage\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor (optional, for handling token expiration)\napi.interceptors.response.use(response => response, async error => {\n  const originalRequest = error.config;\n\n  // If the error is due to an expired token (assuming server sends 401 status)\n  if (error.response.status === 403 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    try {\n      const token = localStorage.getItem('refreshToken');\n      const response = await axios.post(api.baseURL + 'auth/token', {\n        token\n      });\n      const {\n        accessToken\n      } = response.data;\n      localStorage.setItem('token', accessToken);\n\n      // Retry the original request with the new token\n      originalRequest.headers['Authorization'] = `Bearer ${accessToken}`;\n      return api(originalRequest);\n    } catch (refreshError) {\n      // Handle refresh token error (e.g., logout user, redirect to login)\n      console.error('Error refreshing token:', refreshError);\n      // You might want to dispatch a logout action or redirect to login page here\n    }\n  }\n  return Promise.reject(error);\n});\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","interceptors","request","use","config","token","localStorage","getItem","headers","error","Promise","reject","response","originalRequest","status","_retry","post","accessToken","data","setItem","refreshError","console"],"sources":["E:/React/blog-management/src/authInterceptor.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Create an instance of axios\r\nconst api = axios.create({\r\n    baseURL: 'http://localhost:3000/', // Replace with your API base URL\r\n});\r\n\r\n// Request interceptor\r\napi.interceptors.request.use(\r\n    (config) => {\r\n        const token = localStorage.getItem('token'); // Or get the token from your preferred storage\r\n        if (token) {\r\n            config.headers['Authorization'] = `Bearer ${token}`;\r\n        }\r\n        return config;\r\n    },\r\n    (error) => {\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\n// Response interceptor (optional, for handling token expiration)\r\napi.interceptors.response.use(\r\n    (response) => response,\r\n    async (error) => {\r\n        const originalRequest = error.config;\r\n\r\n        // If the error is due to an expired token (assuming server sends 401 status)\r\n        if (error.response.status === 403 && !originalRequest._retry) {\r\n            originalRequest._retry = true;\r\n\r\n            try {\r\n                const token = localStorage.getItem('refreshToken');\r\n                const response = await axios.post(api.baseURL + 'auth/token', { token });\r\n                const { accessToken } = response.data;\r\n\r\n                localStorage.setItem('token', accessToken);\r\n\r\n                // Retry the original request with the new token\r\n                originalRequest.headers['Authorization'] = `Bearer ${accessToken}`;\r\n                return api(originalRequest);\r\n            } catch (refreshError) {\r\n                // Handle refresh token error (e.g., logout user, redirect to login)\r\n                console.error('Error refreshing token:', refreshError);\r\n                // You might want to dispatch a logout action or redirect to login page here\r\n            }\r\n        }\r\n\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\nexport default api;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACrBC,OAAO,EAAE,wBAAwB,CAAE;AACvC,CAAC,CAAC;;AAEF;AACAF,GAAG,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CACvBC,MAAM,IAAK;EACR,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;EAC7C,IAAIF,KAAK,EAAE;IACPD,MAAM,CAACI,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUH,KAAK,EAAE;EACvD;EACA,OAAOD,MAAM;AACjB,CAAC,EACAK,KAAK,IAAK;EACP,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CACJ,CAAC;;AAED;AACAX,GAAG,CAACG,YAAY,CAACW,QAAQ,CAACT,GAAG,CACxBS,QAAQ,IAAKA,QAAQ,EACtB,MAAOH,KAAK,IAAK;EACb,MAAMI,eAAe,GAAGJ,KAAK,CAACL,MAAM;;EAEpC;EACA,IAAIK,KAAK,CAACG,QAAQ,CAACE,MAAM,KAAK,GAAG,IAAI,CAACD,eAAe,CAACE,MAAM,EAAE;IAC1DF,eAAe,CAACE,MAAM,GAAG,IAAI;IAE7B,IAAI;MACA,MAAMV,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;MAClD,MAAMK,QAAQ,GAAG,MAAMf,KAAK,CAACmB,IAAI,CAAClB,GAAG,CAACE,OAAO,GAAG,YAAY,EAAE;QAAEK;MAAM,CAAC,CAAC;MACxE,MAAM;QAAEY;MAAY,CAAC,GAAGL,QAAQ,CAACM,IAAI;MAErCZ,YAAY,CAACa,OAAO,CAAC,OAAO,EAAEF,WAAW,CAAC;;MAE1C;MACAJ,eAAe,CAACL,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUS,WAAW,EAAE;MAClE,OAAOnB,GAAG,CAACe,eAAe,CAAC;IAC/B,CAAC,CAAC,OAAOO,YAAY,EAAE;MACnB;MACAC,OAAO,CAACZ,KAAK,CAAC,yBAAyB,EAAEW,YAAY,CAAC;MACtD;IACJ;EACJ;EAEA,OAAOV,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CACJ,CAAC;AAED,eAAeX,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}